<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咸鱼有点闲</title>
  
  <subtitle>Dick</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wxzhongwang.github.io/"/>
  <updated>2019-01-30T08:43:25.593Z</updated>
  <id>https://wxzhongwang.github.io/</id>
  
  <author>
    <name>Dick Zhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 远程仓库</title>
    <link href="https://wxzhongwang.github.io/2019/01/30/Git%20%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <id>https://wxzhongwang.github.io/2019/01/30/Git 远程仓库/</id>
    <published>2019-01-30T08:42:39.563Z</published>
    <updated>2019-01-30T08:43:25.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-远程仓库"><a href="#Git-远程仓库" class="headerlink" title="Git 远程仓库"></a>Git 远程仓库</h1><p>为了能在任意 Git 项目上协作，你需要知道如何管理自己的远程仓库。远程仓库是指托管在因特网或其他网络中的你的项目的版本库。你可以有好几个远程仓库，通常有些仓库对你只读，有些则可以读写。 与他人协作涉及管理远程仓库以及根据需要推送或拉取数据。管理远程仓库包括了解如何添加远程仓库、移除无效的远程仓库、管理不同的远程分支并定义它们是否被跟踪等等。</p><h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><p>如果想查看你已经配置的远程仓库服务器，可以运行 <strong>git remote</strong> 命令。 它会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到 origin - 这是 Git 给你克隆的仓库服务器的默认名字：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone git<span class="variable">@172</span>.<span class="number">16.5</span>.<span class="number">77</span><span class="symbol">:shengwangzhong/storelcoator</span>.git</span><br><span class="line">Cloning into <span class="string">'storelcoator'</span>...</span><br><span class="line"><span class="symbol">remote:</span> Reusing existing <span class="symbol">pack:</span> <span class="number">1857</span>, done.</span><br><span class="line"><span class="symbol">remote:</span> Total <span class="number">1857</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">Receiving <span class="symbol">objects:</span> <span class="number">100</span>% (<span class="number">1857</span>/<span class="number">1857</span>), <span class="number">374.35</span> KiB | <span class="number">268.00</span> KiB/s, done.</span><br><span class="line">Resolving <span class="symbol">deltas:</span> <span class="number">100</span>% (<span class="number">772</span>/<span class="number">772</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line"><span class="variable">$ </span>cd storelcoator</span><br><span class="line"><span class="variable">$ </span>git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure></p><p>你也可以指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line">origin  git<span class="variable">@172</span>.<span class="number">16.5</span>.<span class="number">77</span><span class="symbol">:shengwangzhong/vue-myblog</span>.git (fetch)</span><br><span class="line">origin  git<span class="variable">@172</span>.<span class="number">16.5</span>.<span class="number">77</span><span class="symbol">:shengwangzhong/vue-myblog</span>.git (push)</span><br></pre></td></tr></table></figure></p><p>如果你的远程仓库不止一个，该命令会将它们全部列出。 例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像下面这样：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cd grit</span><br><span class="line">$ git remote -v</span><br><span class="line">bakkdoor  <span class="string">https:</span><span class="comment">//github.com/bakkdoor/grit (fetch)</span></span><br><span class="line">bakkdoor  <span class="string">https:</span><span class="comment">//github.com/bakkdoor/grit (push)</span></span><br><span class="line">cho45     <span class="string">https:</span><span class="comment">//github.com/cho45/grit (fetch)</span></span><br><span class="line">cho45     <span class="string">https:</span><span class="comment">//github.com/cho45/grit (push)</span></span><br><span class="line">defunkt   <span class="string">https:</span><span class="comment">//github.com/defunkt/grit (fetch)</span></span><br><span class="line">defunkt   <span class="string">https:</span><span class="comment">//github.com/defunkt/grit (push)</span></span><br><span class="line">koke      <span class="string">git:</span><span class="comment">//github.com/koke/grit.git (fetch)</span></span><br><span class="line">koke      <span class="string">git:</span><span class="comment">//github.com/koke/grit.git (push)</span></span><br><span class="line">origin    git<span class="meta">@github</span>.<span class="string">com:</span>mojombo/grit.git (fetch)</span><br><span class="line">origin    git<span class="meta">@github</span>.<span class="string">com:</span>mojombo/grit.git (push)</span><br></pre></td></tr></table></figure></p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>运行 git remote add <shortname> <url> 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote <span class="built_in">add</span> pb http<span class="variable">s:</span>//github.<span class="keyword">com</span>/paulboone/ticgit</span><br><span class="line">$ git remote -v</span><br><span class="line">originhttp<span class="variable">s:</span>//github.<span class="keyword">com</span>/schacon/ticgit (fetch)</span><br><span class="line">originhttp<span class="variable">s:</span>//github.<span class="keyword">com</span>/schacon/ticgit (push)</span><br><span class="line">pbhttp<span class="variable">s:</span>//github.<span class="keyword">com</span>/paulboone/ticgit (fetch)</span><br><span class="line">pbhttp<span class="variable">s:</span>//github.<span class="keyword">com</span>/paulboone/ticgit (push)</span><br></pre></td></tr></table></figure></url></shortname></p><p>现在你可以在命令行中使用字符串 pb 来代替整个 URL。 例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 git fetch pb：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch pb</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">43</span>, done.</span><br><span class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">36</span>/<span class="number">36</span>), done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">43</span> (delta <span class="number">10</span>), reused <span class="number">31</span> (delta <span class="number">5</span>)</span><br><span class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">43</span>/<span class="number">43</span>), done.</span><br><span class="line">From <span class="string">https:</span><span class="comment">//github.com/paulboone/ticgit</span></span><br><span class="line"> * [<span class="keyword">new</span> branch]      master     -&gt; pb/master</span><br><span class="line"> * [<span class="keyword">new</span> branch]      ticgit     -&gt; pb/ticgit</span><br></pre></td></tr></table></figure></p><p>现在 Paul 的 master 分支可以在本地通过 pb/master 访问到 - 你可以将它合并到自己的某个分支中，或者如果你想要查看它的话，可以检出一个指向该点的本地分支。 </p><h2 id="从远程仓库中抓取与拉取"><a href="#从远程仓库中抓取与拉取" class="headerlink" title="从远程仓库中抓取与拉取"></a>从远程仓库中抓取与拉取</h2><p>就如刚才所见，从远程仓库中获得数据，可以执行：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch <span class="string">[remote-name]</span></span><br></pre></td></tr></table></figure></p><p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p><blockquote><p>如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p></blockquote><blockquote><p>如果你有一个分支设置为跟踪一个远程分支，可以使用 <strong>git pull</strong> 命令来自动的抓取然后合并远程分支到当前分支。这对你来说可能是一个更简单或更舒服的工作流程；==默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或不管是什么名字的默认分支）。== 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p></blockquote><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>当你想分享你的项目时，必须将其推送到上游。 这个命令很简单：git push [remote-name] [branch-name]。 当你想要将 master 分支推送到 origin 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），那么运行这个命令就可以将你所做的备份到服务器：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure></p><blockquote><p>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。 </p></blockquote><h2 id="查看远程仓库-详细"><a href="#查看远程仓库-详细" class="headerlink" title="查看远程仓库(详细)"></a>查看远程仓库(详细)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git remote <span class="keyword">show</span> origin</span><br><span class="line">* remote origin</span><br><span class="line">  <span class="keyword">Fetch</span> <span class="keyword">URL</span>: git@<span class="number">172.16</span><span class="number">.5</span><span class="number">.77</span>:shengwangzhong/vue-myblog.git</span><br><span class="line">  Push  <span class="keyword">URL</span>: git@<span class="number">172.16</span><span class="number">.5</span><span class="number">.77</span>:shengwangzhong/vue-myblog.git</span><br><span class="line">  <span class="keyword">HEAD</span> branch: <span class="keyword">master</span></span><br><span class="line">  Remote branch:</span><br><span class="line">    <span class="keyword">master</span> tracked</span><br><span class="line">  <span class="keyword">Local</span> branch configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</span><br><span class="line">    <span class="keyword">master</span> merges <span class="keyword">with</span> remote <span class="keyword">master</span></span><br><span class="line">  <span class="keyword">Local</span> <span class="keyword">ref</span> configured <span class="keyword">for</span> <span class="string">'git push'</span>:</span><br><span class="line">    <span class="keyword">master</span> pushes <span class="keyword">to</span> <span class="keyword">master</span> (up <span class="keyword">to</span> <span class="built_in">date</span>)</span><br></pre></td></tr></table></figure><p>这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支。 它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，还有当你执行 git pull 时哪些分支会自动合并。</p><h2 id="远程仓库的移除与重命名"><a href="#远程仓库的移除与重命名" class="headerlink" title="远程仓库的移除与重命名"></a>远程仓库的移除与重命名</h2><p>如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。 例如，想要将 pb 重命名为 paul，可以用 git remote rename 这样做：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote rename pb paul</span><br><span class="line"><span class="variable">$ </span>git remote</span><br><span class="line">origin</span><br><span class="line">paul</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-远程仓库&quot;&gt;&lt;a href=&quot;#Git-远程仓库&quot; class=&quot;headerlink&quot; title=&quot;Git 远程仓库&quot;&gt;&lt;/a&gt;Git 远程仓库&lt;/h1&gt;&lt;p&gt;为了能在任意 Git 项目上协作，你需要知道如何管理自己的远程仓库。远程仓库是指托管在因特网
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git 撤销操作</title>
    <link href="https://wxzhongwang.github.io/2019/01/30/Git%20%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://wxzhongwang.github.io/2019/01/30/Git 撤销操作/</id>
    <published>2019-01-30T08:42:35.376Z</published>
    <updated>2019-01-30T08:43:03.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-撤销操作"><a href="#Git-撤销操作" class="headerlink" title="Git 撤销操作"></a>Git 撤销操作</h1><p>在任何一个阶段，你都有可能想要撤消某些操作。 注意，有些撤消操作是不可逆的。 这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。</p><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 –amend 选项的提交命令尝试重新提交：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend</span></span><br></pre></td></tr></table></figure></p><p>这个命令会将暂存区中的文件提交。如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。</p><p>例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">'initial commit'</span></span><br><span class="line">$ git <span class="keyword">add</span> forgotten_file</span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend</span></span><br></pre></td></tr></table></figure></p><p>最终你只会有一个提交 - 第二次提交将代替第一次提交的结果。</p><h2 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h2><p>接下来的两个小节演示如何操作暂存区域与工作目录中已修改的文件。 这些命令在修改文件状态的同时，也会提示如何撤消操作。 例如，你已经修改了两个文件并且想要将它们作为两次独立的修改提交，但是却意外地输入了 git add * 暂存了它们两个。 如何只取消暂存两个中的一个呢？ git status 命令提示了你：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git add *</span><br><span class="line"><span class="variable">$ </span>git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be <span class="symbol">committed:</span></span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">    <span class="symbol">renamed:</span>    README.md -&gt; README</span><br><span class="line">    <span class="symbol">modified:</span>   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></p><p>在 “Changes to be committed” 文字正下方，提示使用 git reset HEAD <file>… 来取消暂存。 所以，我们可以这样来取消暂存 CONTRIBUTING.md 文件：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="keyword">HEAD</span> CONTRIBUTING.md</span><br><span class="line">Unstaged changes <span class="keyword">after</span> <span class="keyword">reset</span>:</span><br><span class="line">MCONTRIBUTING.md</span><br><span class="line">$ git <span class="keyword">status</span></span><br><span class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">    renamed:    README.md -&gt; README</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></file></p><p>这个命令有点儿奇怪，但是起作用了。 CONTRIBUTING.md 文件已经是修改未暂存的状态了。</p><blockquote><p>Note：虽然在调用时加上 –hard 选项可以令 git reset 成为一个危险的命令（译注：可能导致工作目录中所有当前进度丢失！）不加选项地调用 git reset 并不危险 — 它只会修改暂存区域。</p></blockquote><h2 id="撤消对文件的修改"><a href="#撤消对文件的修改" class="headerlink" title="撤消对文件的修改"></a>撤消对文件的修改</h2><p>如果你并不想保留对 CONTRIBUTING.md 文件的修改怎么办？ 你该如何方便地撤消修改 - 将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？ 幸运的是，git status 也告诉了你应该如何做。 在最后一个例子中，未暂存区域是这样：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></p><p>它非常清楚地告诉了你如何撤消之前所做的修改。 让我们来按照提示执行：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- CONTRIBUTING.md</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">    renamed:    README.md -&gt; README</span><br></pre></td></tr></table></figure></p><p>可以看到那些修改已经被撤消了。</p><blockquote><p>Important: 你需要知道 git checkout – [file] 是一个危险的命令，这很重要。 你对那个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-撤销操作&quot;&gt;&lt;a href=&quot;#Git-撤销操作&quot; class=&quot;headerlink&quot; title=&quot;Git 撤销操作&quot;&gt;&lt;/a&gt;Git 撤销操作&lt;/h1&gt;&lt;p&gt;在任何一个阶段，你都有可能想要撤消某些操作。 注意，有些撤消操作是不可逆的。 这是在使用 G
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>世界以痛吻我 我却报之以歌</title>
    <link href="https://wxzhongwang.github.io/2019/01/29/%E4%B8%96%E7%95%8C%E4%BB%A5%E7%97%9B%E5%90%BB%E6%88%91%EF%BC%8C%E6%88%91%E5%8D%B4%E6%8A%A5%E4%B9%8B%E4%BB%A5%E6%AD%8C/"/>
    <id>https://wxzhongwang.github.io/2019/01/29/世界以痛吻我，我却报之以歌/</id>
    <published>2019-01-29T09:10:10.000Z</published>
    <updated>2019-01-30T08:46:56.649Z</updated>
    
    <content type="html"><![CDATA[<p>今年发生不好的事，一切都显得不那么美好，就很多事情都不按大家的预想在发展。就一起都感觉不顺利，2018已经不够友好了，还记得刚刚过去的23岁生日，记得自己的愿望是希望，真挚希望所有的亲朋好友能够健康，健康就够了，钱多钱少不重要，就是健康就够了。。。</p><p>但是偏偏还是发生了。</p><h1 id="世界以痛吻我-我却报之以歌"><a href="#世界以痛吻我-我却报之以歌" class="headerlink" title="世界以痛吻我 我却报之以歌"></a>世界以痛吻我 我却报之以歌</h1><p>亲人已仙游，未呈儿孙福，幽魂于千里，如何度思量。</p><p>2018年06月14日早9：00点，在杭州，还在床上的我猛的收到了家人群的消息，早已患糖尿病多年的舅舅病逝。尽管心里有多不愿意接受，但是心里也算是做好了准备。在五一回家时间便已经被告知舅舅身体日渐消瘦，骨瘦如柴。我还趁着工作之余，抽空去看望了。当看到那一瞬间，我感觉我整个人就不好了，眼泪一下就出来了，整个人像楞住了一般，久久说不出话，手也不知道往哪里放。当舅舅看到我，一把把我拽住，死死捏着，这一幕到现在我也忘不了…</p><p>又是在杭州，2019年01月29日早8: 00点，同样的戏码，姨夫病逝，癌症晚期，距离收到通知，也就短短三个多月时间，大概一百多天，原本一个看上去健健康康的人，就突然离开，就像上帝给你的人生突然上了锁，然后把钥匙给扔掉了的感觉…</p><p>醒来又是一天，开始干活，累…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年发生不好的事，一切都显得不那么美好，就很多事情都不按大家的预想在发展。就一起都感觉不顺利，2018已经不够友好了，还记得刚刚过去的23岁生日，记得自己的愿望是希望，真挚希望所有的亲朋好友能够健康，健康就够了，钱多钱少不重要，就是健康就够了。。。&lt;/p&gt;
&lt;p&gt;但是偏偏还
      
    
    </summary>
    
      <category term="个人" scheme="https://wxzhongwang.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="https://wxzhongwang.github.io/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Git查看历史提交</title>
    <link href="https://wxzhongwang.github.io/2019/01/25/Git%20%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2/"/>
    <id>https://wxzhongwang.github.io/2019/01/25/Git 查看提交历史/</id>
    <published>2019-01-25T03:58:59.671Z</published>
    <updated>2019-01-25T04:06:07.284Z</updated>
    
    <content type="html"><![CDATA[<p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 git log 命令。<br>默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p><h1 id="Git-查看提交历史"><a href="#Git-查看提交历史" class="headerlink" title="Git 查看提交历史"></a>Git 查看提交历史</h1><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 git log 命令。<br>默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p><p>git log 有许多选项可以帮助你搜寻你所要找的提交， 接下来我们介绍些最常用的。</p><h2 id="定制输出格式"><a href="#定制输出格式" class="headerlink" title="定制输出格式"></a>定制输出格式</h2><h3 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h3><p>一个常用的选项是 -p，用来显示每次提交的内容差异。 你也可以加上 -2 来仅显示最近两次提交：</p><blockquote><p>该选项除了显示基本信息之外，还附带了每次commit的变化。当进行代码审查，或者快速浏览某个搭档提交的commit所带来的变化的时候，这个参数就非常有用了。<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p -<span class="number">2</span></span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line"><span class="symbol">Author:</span> Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line"><span class="symbol">Date:</span>   Mon Mar <span class="number">17</span> <span class="number">21</span>:<span class="number">52</span>:<span class="number">11</span> <span class="number">2008</span> -<span class="number">0700</span></span><br><span class="line"></span><br><span class="line">    changed the version number</span><br><span class="line"></span><br><span class="line">diff --git a/Rakefile b/Rakefile</span><br><span class="line">index a874b73..<span class="number">8</span>f94139 <span class="number">100644</span></span><br><span class="line">--- a/Rakefile</span><br><span class="line">+++ b/Rakefile</span><br><span class="line">@@ -<span class="number">5</span>,<span class="number">7</span> +<span class="number">5</span>,<span class="number">7</span> @@ <span class="keyword">require</span> <span class="string">'rake/gempackagetask'</span></span><br><span class="line"> spec = <span class="symbol">Gem:</span>:Specification.new <span class="keyword">do</span> |s|</span><br><span class="line">     s.platform  =   <span class="symbol">Gem:</span>:<span class="symbol">Platform:</span>:RUBY</span><br><span class="line">     s.name      =   <span class="string">"simplegit"</span></span><br><span class="line">-    s.version   =   <span class="string">"0.1.0"</span></span><br><span class="line">+    s.version   =   <span class="string">"0.1.1"</span></span><br><span class="line">     s.author    =   <span class="string">"Scott Chacon"</span></span><br><span class="line">     s.email     =   <span class="string">"schacon@gee-mail.com"</span></span><br><span class="line">     s.summary   =   <span class="string">"A simple gem for using Git in Ruby code."</span></span><br><span class="line"></span><br><span class="line">commit <span class="number">085</span>bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class="line"><span class="symbol">Author:</span> Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line"><span class="symbol">Date:</span>   Sat Mar <span class="number">15</span> <span class="number">16</span>:<span class="number">40</span>:<span class="number">33</span> <span class="number">2008</span> -<span class="number">0700</span></span><br><span class="line"></span><br><span class="line">    removed unnecessary test</span><br><span class="line"></span><br><span class="line">diff --git a/<span class="class"><span class="keyword">lib</span>/<span class="title">simplegit</span>.<span class="title">rb</span> <span class="title">b</span>/<span class="title">lib</span>/<span class="title">simplegit</span>.<span class="title">rb</span></span></span><br><span class="line">index a0a60ae..<span class="number">47</span>c6340 <span class="number">100644</span></span><br><span class="line">--- a/<span class="class"><span class="keyword">lib</span>/<span class="title">simplegit</span>.<span class="title">rb</span></span></span><br><span class="line">+++ b/<span class="class"><span class="keyword">lib</span>/<span class="title">simplegit</span>.<span class="title">rb</span></span></span><br><span class="line">@@ -<span class="number">18</span>,<span class="number">8</span> +<span class="number">18</span>,<span class="number">3</span> @@ <span class="class"><span class="keyword">class</span> <span class="title">SimpleGit</span></span></span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">-</span><br><span class="line">-<span class="keyword">if</span> $<span class="number">0</span> == <span class="keyword">__FILE__</span></span><br><span class="line">-  git = SimpleGit.new</span><br><span class="line">-  puts git.show</span><br><span class="line">-<span class="keyword">end</span></span><br><span class="line">\ No newline at <span class="keyword">end</span> <span class="keyword">of</span> file</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="–stat"><a href="#–stat" class="headerlink" title="–stat"></a>–stat</h3><p>你也可以为 git log 附带一系列的总结性选项。比如说，如果你想看到每次提交的简略的统计信息，你可以使用 –stat 选项：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ git log --stat</span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line"><span class="symbol">Author:</span> Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line"><span class="symbol">Date:</span>   Mon Mar <span class="number">17</span> <span class="number">21</span>:<span class="number">52</span>:<span class="number">11</span> <span class="number">2008</span> -<span class="number">0700</span></span><br><span class="line"></span><br><span class="line">    changed the version number</span><br><span class="line"></span><br><span class="line"> Rakefile | <span class="number">2</span> +-</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</span><br><span class="line"></span><br><span class="line">commit <span class="number">085</span>bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class="line"><span class="symbol">Author:</span> Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line"><span class="symbol">Date:</span>   Sat Mar <span class="number">15</span> <span class="number">16</span>:<span class="number">40</span>:<span class="number">33</span> <span class="number">2008</span> -<span class="number">0700</span></span><br><span class="line"></span><br><span class="line">    removed unnecessary test</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">lib</span>/<span class="title">simplegit</span>.<span class="title">rb</span> | 5 -----</span></span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">5</span> deletions(-)</span><br><span class="line"></span><br><span class="line">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class="line"><span class="symbol">Author:</span> Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line"><span class="symbol">Date:</span>   Sat Mar <span class="number">15</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">28</span> <span class="number">2008</span> -<span class="number">0700</span></span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br><span class="line"> README           |  <span class="number">6</span> ++++++</span><br><span class="line"> Rakefile         | <span class="number">23</span> +++++++++++++++++++++++</span><br><span class="line"> <span class="class"><span class="keyword">lib</span>/<span class="title">simplegit</span>.<span class="title">rb</span> | 25 +++++++++++++++++++++++++</span></span><br><span class="line"> <span class="number">3</span> files changed, <span class="number">54</span> insertions(+)</span><br></pre></td></tr></table></figure></p><blockquote><p>正如你所看到的，–stat 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p></blockquote><h3 id="–pretty"><a href="#–pretty" class="headerlink" title="–pretty"></a>–pretty</h3><blockquote><p>这个选项可以指定使用不同于默认格式的方式展示提交历史。 这个选项有一些内建的子选项供你使用。 比如用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">--pretty=oneline</span></span><br><span class="line">ca82a6dff817ec66f44342007202690a93763949 changed <span class="keyword">the</span> <span class="built_in">version</span> <span class="built_in">number</span></span><br><span class="line"><span class="number">085</span>bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test</span><br><span class="line">a11bef06a3f659402fe7563abf99ad00de2209e6 <span class="keyword">first</span> commit</span><br></pre></td></tr></table></figure></p></blockquote><p>但最有意思的是 format，可以定制要显示的记录格式。 这样的输出对后期提取分析格外有用。因为你知道输出的格式不会随着 Git 的更新而发生改变：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">--pretty=format:"%h - %an, %ar : %s"</span></span><br><span class="line">ca82a6d - Scott Chacon, <span class="number">6</span> years ago : changed <span class="keyword">the</span> <span class="built_in">version</span> <span class="built_in">number</span></span><br><span class="line"><span class="number">085</span>bb3b - Scott Chacon, <span class="number">6</span> years ago : removed unnecessary test</span><br><span class="line">a11bef0 - Scott Chacon, <span class="number">6</span> years ago : <span class="keyword">first</span> commit</span><br></pre></td></tr></table></figure></p><p>git log –pretty=format 常用的选项 列出了常用的格式占位符写法及其代表的意义。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交对象（commit）的完整哈希字串</td></tr><tr><td>%h</td><td>提交对象的简短哈希字串</td></tr><tr><td>%T</td><td>树对象（tree）的完整哈希字串</td></tr><tr><td>%t</td><td>树对象的简短哈希字串</td></tr><tr><td>%P</td><td>父对象（parent）的完整哈希字串</td></tr><tr><td>%p</td><td>父对象的简短哈希字串</td></tr><tr><td>%an</td><td>作者（author）的名字</td></tr><tr><td>%ae</td><td>作者的电子邮件地址</td></tr><tr><td>%ad</td><td>作者修订日期（可以用 –date= 选项定制格式）</td></tr><tr><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%cn</td><td>提交者（committer）的名字</td></tr><tr><td>%ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%cd</td><td>提交日期</td></tr><tr><td>%cr</td><td>提交日期，按多久以前的方式显示</td></tr><tr><td>%s</td><td>提交说明</td></tr></tbody></table><blockquote><p>你一定奇怪 作者 和 提交者之间究竟有何差别，其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。</p></blockquote><h3 id="–graph"><a href="#–graph" class="headerlink" title="–graph"></a>–graph</h3><p>当 oneline 或 format 与另一个 log 选项 –graph 结合使用时尤其有用。 这个选项添加了一些ASCII字符串来形象地展示你的分支、合并历史：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">--pretty=format:"%h %s" --graph</span></span><br><span class="line">* <span class="number">2</span>d3acf9 ignore errors <span class="built_in">from</span> SIGCHLD <span class="keyword">on</span> <span class="title">trap</span></span><br><span class="line">*  <span class="number">5e3</span>ee11 Merge branch <span class="string">'master'</span> <span class="keyword">of</span> git://github.com/dustin/grit</span><br><span class="line">|\</span><br><span class="line">| * <span class="number">420</span>eac9 Added <span class="keyword">a</span> method <span class="keyword">for</span> getting <span class="keyword">the</span> current branch.</span><br><span class="line">* | <span class="number">30e367</span>c timeout code <span class="keyword">and</span> tests</span><br><span class="line">* | <span class="number">5</span>a09431 <span class="built_in">add</span> timeout protection <span class="built_in">to</span> grit</span><br><span class="line">* | e1193f8 support <span class="keyword">for</span> heads <span class="keyword">with</span> slashes <span class="keyword">in</span> them</span><br><span class="line">|/</span><br><span class="line">* d6016bc <span class="built_in">require</span> <span class="built_in">time</span> <span class="keyword">for</span> xmlschema</span><br><span class="line">*  <span class="number">11</span>d191e Merge branch <span class="string">'defunkt'</span> <span class="keyword">into</span> <span class="built_in">local</span></span><br></pre></td></tr></table></figure></p><h3 id="常用汇总"><a href="#常用汇总" class="headerlink" title="常用汇总"></a>常用汇总</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>按补丁格式显示每个更新之间的差异。</td></tr><tr><td>–stat</td><td>显示每次更新的文件修改统计信息。</td></tr><tr><td>–shortstat</td><td>只显示 –stat 中最后的行数修改添加移除统计。</td></tr><tr><td>–name-only</td><td>仅在提交信息后显示已修改的文件清单。</td></tr><tr><td>–name-status</td><td>显示新增、修改、删除的文件清单。</td></tr><tr><td>–abbrev-commit</td><td>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</td></tr><tr><td>–relative-date</td><td>使用较短的相对时间显示（比如，“2 weeks ago”）。</td></tr><tr><td>–graph</td><td>显示 ASCII 图形表示的分支合并历史。</td></tr><tr><td>–pretty</td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</td></tr></tbody></table><h2 id="限制输出长度"><a href="#限制输出长度" class="headerlink" title="限制输出长度"></a>限制输出长度</h2><p>it log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。 之前你已经看到过 -2 了，它只显示最近的两条提交， 实际上，这是 -<n> 选项的写法，其中的 n 可以是任何整数，表示仅显示最近的若干条提交。 不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序，所以你一次只会看到一页的内容。</n></p><h3 id="常用汇总-1"><a href="#常用汇总-1" class="headerlink" title="常用汇总"></a>常用汇总</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-(n)</td><td>仅显示最近的 n 条提交。</td></tr><tr><td>–since, –after</td><td>仅显示指定时间之后的提交。</td></tr><tr><td>–until, –before</td><td>仅显示指定时间之前的提交。</td></tr><tr><td>–author</td><td>仅显示指定作者相关的提交。</td></tr><tr><td>–committer</td><td>仅显示指定提交者相关的提交。</td></tr><tr><td>–grep</td><td>仅显示含指定关键字的提交。</td></tr><tr><td>-S</td><td>仅显示添加或移除了某个关键字的提交。</td></tr></tbody></table><p>另外还有按照时间作限制的选项，比如 –since 和 –until 也很有用。 例如，下面的命令列出所有最近两周内的提交：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">--since=2.weeks</span></span><br></pre></td></tr></table></figure></p><p>这个命令可以在多种格式下工作，比如说具体的某一天 “2008-01-15”，或者是相对地多久以前 “2 years 1 day 3 minutes ago”。</p><p>来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试文件，可以用下面的查询命令：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">log</span> --pretty=<span class="string">"%h - %s"</span> --author=gitster --since=<span class="string">"2008-10-01"</span> \</span><br><span class="line">   --before=<span class="string">"2008-11-01"</span> --<span class="keyword">no</span>-merges -- t/</span><br><span class="line"><span class="number">5610</span>e3b - Fix testcase failure <span class="keyword">when</span> extended attributes are in <span class="keyword">use</span></span><br><span class="line">acd3b9e - Enhance hold_lock_file_for<span class="number">_</span>&#123;update,append&#125;() API</span><br><span class="line">f563754 - demonstrate breakage of detached checkout with symbolic <span class="keyword">link</span> HEAD</span><br><span class="line">d1a43f2 - <span class="keyword">reset</span> --hard/<span class="keyword">read</span>-tree --<span class="keyword">reset</span> -u: remove unmerged new paths</span><br><span class="line"><span class="number">51</span>a94af - Fix <span class="string">"checkout --track -b newbranch"</span> on detached HEAD</span><br><span class="line">b0ad11e - pull: allow <span class="string">"git pull origin $something:$current_branch"</span> into an unborn branch</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 git log 命令。&lt;br&gt;默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git移动文件</title>
    <link href="https://wxzhongwang.github.io/2019/01/25/Git%20%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6/"/>
    <id>https://wxzhongwang.github.io/2019/01/25/Git 移动文件/</id>
    <published>2019-01-25T03:58:56.881Z</published>
    <updated>2019-01-25T04:06:13.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h1><p>Git 并不显式跟踪文件移动操作。如果在Git中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 不过 Git 非常聪明，它会推断出究竟发生了什么。</p><p>既然如此，当你看到 Git 的 mv 命令时一定会困惑不已。 要在 Git 中对文件改名，可以这么做：<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">mv</span> file_from file_to</span><br></pre></td></tr></table></figure></p><p>它会恰如预期般正常工作。实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git mv README.md README</span><br><span class="line"><span class="variable">$ </span>git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be <span class="symbol">committed:</span></span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">    <span class="symbol">renamed:</span>    README.md -&gt; README</span><br></pre></td></tr></table></figure></p><p>其实，运行 git mv 就相当于运行了下面三条命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv README<span class="selector-class">.md</span> README</span><br><span class="line">$ git rm README.md</span><br><span class="line">$ git add README</span><br></pre></td></tr></table></figure></p><p>如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样。 两者唯一的区别是，mv 是一条命令而另一种方式需要三条命令，直接用 git mv 轻便得多。 不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;移动文件&quot;&gt;&lt;a href=&quot;#移动文件&quot; class=&quot;headerlink&quot; title=&quot;移动文件&quot;&gt;&lt;/a&gt;移动文件&lt;/h1&gt;&lt;p&gt;Git 并不显式跟踪文件移动操作。如果在Git中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 不过 G
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git移除文件</title>
    <link href="https://wxzhongwang.github.io/2019/01/25/Git%20%E7%A7%BB%E9%99%A4%E6%96%87%E4%BB%B6/"/>
    <id>https://wxzhongwang.github.io/2019/01/25/Git 移除文件/</id>
    <published>2019-01-25T03:58:53.780Z</published>
    <updated>2019-01-25T04:06:16.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h1><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p><p>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ rm PROJECTS.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date <span class="keyword">with</span> <span class="string">'origin/master'</span>.</span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add/rm &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">        deleted:    PROJECTS.md</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure></p><p>然后再运行 git rm 记录此次移除文件的操作：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git rm PROJECTS.md</span><br><span class="line">rm <span class="symbol">'PROJECTS</span>.md'</span><br><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">    deleted:    PROJECTS.md</span><br></pre></td></tr></table></figure></p><p>下一次提交时，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即force的首字母）。这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。</p><p>另外一种情况是，我们想把文件从Git仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆.a这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 –cached 选项：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm <span class="comment">--cached README</span></span><br></pre></td></tr></table></figure></p><p>git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。 比方说：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> git rm <span class="built-in">log</span>/\*.<span class="built-in">log</span></span><br></pre></td></tr></table></figure></p><p>注意到星号 * 之前的反斜杠 \， 因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。 此命令删除 log/ 目录下扩展名为 .log 的所有文件。 类似的比如：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git rm \*~</span><br></pre></td></tr></table></figure></p><p>该命令为删除以 ~ 结尾的所有文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-rm&quot;&gt;&lt;a href=&quot;#git-rm&quot; class=&quot;headerlink&quot; title=&quot;git rm&quot;&gt;&lt;/a&gt;git rm&lt;/h1&gt;&lt;p&gt;要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git提交</title>
    <link href="https://wxzhongwang.github.io/2019/01/25/Git%20Commit/"/>
    <id>https://wxzhongwang.github.io/2019/01/25/Git Commit/</id>
    <published>2019-01-25T03:58:48.533Z</published>
    <updated>2019-01-25T04:05:40.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h1><p>现在的暂存区域已经准备妥当可以提交了。 在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。 这些修改过的文件只保留在本地磁盘。 所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 git commit：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git commit</span><br></pre></td></tr></table></figure></p><p>你也可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行。</p><blockquote><p>请在每次提交时添加comment<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">"Story 182: Fix benchmarks for speed"</span></span><br><span class="line">[<span class="keyword">master</span> <span class="number">463</span>dc4f] Story <span class="number">182</span>: Fix benchmarks <span class="keyword">for</span> speed</span><br><span class="line"> <span class="number">2</span> files <span class="keyword">changed</span>, <span class="number">2</span> insertions(+)</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> README</span><br></pre></td></tr></table></figure></p></blockquote><p>好，现在你已经创建了第一个提交！ 可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（463dc4f），以及在本次提交中，有多少文件修订过，多少行添加和删改过。</p><blockquote><p>请记住，提交时记录的是放在暂存区域的快照。 任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。</p></blockquote><h2 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h2><p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br><span class="line">$ git <span class="keyword">commit</span> -a -m <span class="string">'added new benchmarks'</span></span><br><span class="line">[<span class="keyword">master</span> <span class="number">83e38</span>c7] added <span class="keyword">new</span> benchmarks</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">5</span> insertions(+), <span class="number">0</span> deletions(-)</span><br></pre></td></tr></table></figure></p><p>此时，提交之前不再需要 git add 文件“CONTRIBUTING.md”了。个人觉得不推荐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-Commit&quot;&gt;&lt;a href=&quot;#Git-Commit&quot; class=&quot;headerlink&quot; title=&quot;Git Commit&quot;&gt;&lt;/a&gt;Git Commit&lt;/h1&gt;&lt;p&gt;现在的暂存区域已经准备妥当可以提交了。 在此之前，请一定要确认还有什么修改过
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git Diff</title>
    <link href="https://wxzhongwang.github.io/2019/01/24/Git%20Diff/"/>
    <id>https://wxzhongwang.github.io/2019/01/24/Git Diff/</id>
    <published>2019-01-24T08:08:56.227Z</published>
    <updated>2019-01-25T03:59:24.007Z</updated>
    
    <content type="html"><![CDATA[<p>#Git Diff</p><p>如果 git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。 尽管 git status 已经通过在相应栏下列出文件名的方式回答了这个问题，git diff 将通过文件补丁的格式显示具体哪些行发生了改变。</p><p>作用<br>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变。化内容。</p><p>若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff –cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff –staged，效果是相同的，但更好记些。）</p><p>请注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Git Diff&lt;/p&gt;
&lt;p&gt;如果 git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。 尽管 git status 已经通过在相应栏下列出文件名的方式回答了这个问题，git diff 将通过文件补丁的格式显示
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git .gitignore</title>
    <link href="https://wxzhongwang.github.io/2019/01/24/Git%20gitignore/"/>
    <id>https://wxzhongwang.github.io/2019/01/24/Git gitignore/</id>
    <published>2019-01-24T08:08:53.509Z</published>
    <updated>2019-01-24T08:11:41.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gitignore-忽略文件"><a href="#gitignore-忽略文件" class="headerlink" title=".gitignore 忽略文件"></a>.gitignore 忽略文件</h1><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 来看一个实际的例子：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> cat .gitignore</span><br><span class="line"><span class="comment">*.[oa]</span></span><br><span class="line"><span class="comment">*~</span></span><br></pre></td></tr></table></figure><p>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 </p><blockquote><p>要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。</p></blockquote><p>文件 .gitignore 的格式规范如下：</p><ul><li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式可以以（/）开头防止递归。</li><li>匹配模式可以以（/）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（<em>）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（</em>) 表示匹配任意中间目录，比如<code>a/**/z</code> 可以匹配 a/z, a/b/z 或 <code>a/b/c/z</code>等。</p><p>我们再看一个 .gitignore 文件的例子：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># no .a files</span></span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># but do track lib.a, even though you're ignoring .a files above</span></span><br><span class="line">!<span class="class"><span class="keyword">lib</span>.<span class="title">a</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># only ignore the TODO file in the current directory, not subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore all files in the build/ directory</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore doc/notes.txt, but not doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore all .pdf files in the doc/ directory</span></span><br><span class="line">doc/**<span class="regexp">/*.pdf</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gitignore-忽略文件&quot;&gt;&lt;a href=&quot;#gitignore-忽略文件&quot; class=&quot;headerlink&quot; title=&quot;.gitignore 忽略文件&quot;&gt;&lt;/a&gt;.gitignore 忽略文件&lt;/h1&gt;&lt;p&gt;一般我们总会有些文件无需纳入 Git 的
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git记录更新到仓库</title>
    <link href="https://wxzhongwang.github.io/2019/01/24/Git%20%E5%9F%BA%E7%A1%80%20-%20%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93/"/>
    <id>https://wxzhongwang.github.io/2019/01/24/Git 基础 - 记录每次更新到仓库/</id>
    <published>2019-01-24T08:08:50.299Z</published>
    <updated>2019-01-25T04:05:55.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h1><p>现在我们手上有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。 接下来，对这些文件做些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。</p><blockquote><p>请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。</p></blockquote><p>已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。</p><p>编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 我们逐步将这些修改过的文件放入暂存区，然后提交所有暂存了的修改，如此反复。所以使用 Git 时文件的生命周期如下：</p><p><img src="https://git-scm.com/book/en/v2/images/lifecycle.png" alt="image"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">检查当前文件状态:</span><br><span class="line">$ git status</span><br><span class="line">On branch <span class="literal">master</span></span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。 最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。 现在，分支名是 “master”,这是默认的分支名。</p><p>现在，让我们在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 git status 命令，你将看到一个新的未跟踪文件：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">echo</span> <span class="string">'My Project'</span> &gt; README</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked <span class="keyword">file</span><span class="variable">s:</span></span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> include in what will <span class="keyword">be</span> committed)</span><br><span class="line"></span><br><span class="line">    README</span><br><span class="line"></span><br><span class="line">nothing added <span class="keyword">to</span> commit but untracked <span class="keyword">files</span> present (use <span class="string">"git add"</span> <span class="keyword">to</span> track)</span><br></pre></td></tr></table></figure></p><p>在状态报告中可以看到新建的 README 文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”， 这样的处理让你不必担心将生成的二进制文件或其它不想被跟踪的文件包含进来。 不过现在的例子中，我们确实想要跟踪管理 README 这个文件。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用命令 git <span class="keyword">add</span><span class="bash"> 开始跟踪一个文件。 所以，要跟踪 README 文件，运行：</span></span><br><span class="line"><span class="bash">$ git add README</span></span><br></pre></td></tr></table></figure></p><p>这时候我们在运行git status查看状态：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">file</span>:   README</span><br></pre></td></tr></table></figure></p><p>文件已经处于被追踪的状态了，并处于暂存状态。</p><p>现在我们来修改一个已被跟踪的文件。 如果你修改了一个名为 CONTRIBUTING.md 的已被跟踪的文件，然后运行 git status 命令，会看到下面内容：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">file</span>:   README</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></p><blockquote><p>文件 CONTRIBUTING.md 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 git add命令。</p></blockquote><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add:"></a>git add:</h2><blockquote><p>这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。 现在让我们运行 git add 将”CONTRIBUTING.md”放到暂存区，然后再看看 git status 的输出：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add CONTRIBUTING.md</span><br><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">file</span>:   README</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></p></blockquote><p>现在两个文件都已暂存，下次提交时就会一并记录到仓库。 假设此时，你想要在 CONTRIBUTING.md 里再加条注释， 重新编辑存盘后，准备好提交。 不过且慢，再运行 git status 看看：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vim CONTRIBUTING.md</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">file</span>:   README</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></p><p>怎么回事？ 现在 CONTRIBUTING.md 文件同时出现在暂存区和非暂存区。 这怎么可能呢？ 好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本， 如果你现在提交，CONTRIBUTING.md 的版本是你最后一次运行 git add 命令时的那个版本，而不是你运行 git commit 时，在工作目录中的当前版本。 所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add CONTRIBUTING.md</span><br><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">file</span>:   README</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></p><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>git status 命令的输出十分详细，但其用语有些繁琐。 如果你使用 git status -s 命令或 git status –short 命令，你将得到一种更为紧凑的格式输出。 运行 git status -s ，状态报告输出如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M README</span><br><span class="line">MM Rakefile</span><br><span class="line">A  <span class="class"><span class="keyword">lib</span>/<span class="title">git</span>.<span class="title">rb</span></span></span><br><span class="line">M  <span class="class"><span class="keyword">lib</span>/<span class="title">simplegit</span>.<span class="title">rb</span></span></span><br><span class="line">?? LICENSE.txt</span><br></pre></td></tr></table></figure></p><p>新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。 你可能注意到了 M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。 例如，上面的状态报告显示： README 文件在工作区被修改了但是还没有将修改后的文件放入暂存区,lib/simplegit.rb 文件被修改了并将修改后的文件放入了暂存区。 而 Rakefile 在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记录每次更新到仓库&quot;&gt;&lt;a href=&quot;#记录每次更新到仓库&quot; class=&quot;headerlink&quot; title=&quot;记录每次更新到仓库&quot;&gt;&lt;/a&gt;记录每次更新到仓库&lt;/h1&gt;&lt;p&gt;现在我们手上有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git Clone</title>
    <link href="https://wxzhongwang.github.io/2019/01/24/Git%20%E8%8E%B7%E5%8F%96Git%E4%BB%93%E5%BA%93/"/>
    <id>https://wxzhongwang.github.io/2019/01/24/Git 获取Git仓库/</id>
    <published>2019-01-24T08:08:46.776Z</published>
    <updated>2019-01-24T08:11:05.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h1><p>有两种取得 Git 项目仓库的方法。 </p><ul><li>第一种是在现有项目或目录下导入所有文件到 Git 中</li><li>第二种是从一个服务器克隆一个现有的 Git 仓库</li></ul><h2 id="在现有目录初始化"><a href="#在现有目录初始化" class="headerlink" title="在现有目录初始化"></a>在现有目录初始化</h2> <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git init</span><br></pre></td></tr></table></figure><blockquote><p>该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。</p></blockquote><h2 id="克隆现有的仓库"><a href="#克隆现有的仓库" class="headerlink" title="克隆现有的仓库"></a>克隆现有的仓库</h2><p> 如果你想获得一份已经存在了的Git仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 git clone 命令。 </p><p> 克隆仓库的命令格式是 git clone [url] 。</p> <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone git<span class="variable">@172</span>.<span class="number">16.5</span>.<span class="number">77</span><span class="symbol">:shengwangzhong/hexo-blog</span>.git</span><br></pre></td></tr></table></figure><p>这会在当前目录下创建一个名为 “hexo-blog” 的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入.git文件夹，然后从中读取最新版本的文件的拷贝。 如果你进入到这个新建的hexo-blog文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。 如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：<br> <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone git<span class="variable">@172</span>.<span class="number">16.5</span>.<span class="number">77</span><span class="symbol">:shengwangzhong/hexo-blog</span>.git your-folder-name</span><br></pre></td></tr></table></figure></p><p>这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 your-folder-name。</p><p> Git 支持多种数据传输协议。 ssh\https\git</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;获取-Git-仓库&quot;&gt;&lt;a href=&quot;#获取-Git-仓库&quot; class=&quot;headerlink&quot; title=&quot;获取 Git 仓库&quot;&gt;&lt;/a&gt;获取 Git 仓库&lt;/h1&gt;&lt;p&gt;有两种取得 Git 项目仓库的方法。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种是在现有项目
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git起步</title>
    <link href="https://wxzhongwang.github.io/2019/01/24/Git%E8%B5%B7%E6%AD%A5/"/>
    <id>https://wxzhongwang.github.io/2019/01/24/Git起步/</id>
    <published>2019-01-24T08:08:43.060Z</published>
    <updated>2019-01-24T08:12:14.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git起步"><a href="#Git起步" class="headerlink" title="Git起步"></a>Git起步</h1><blockquote><p>安装好第一步一定是配置用户名和邮箱.</p></blockquote><h2 id="配置用户名邮箱"><a href="#配置用户名邮箱" class="headerlink" title="配置用户名邮箱"></a>配置用户名邮箱</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"shengwangzhong"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email shengwangzhong@hengtiansoft.com</span><br></pre></td></tr></table></figure><p>再次强调，如果使用了 –global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 –global 选项的命令来配置。</p><h2 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h2><p>如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--list</span><br><span class="line">core.<span class="attribute">symlinks</span>=<span class="literal">false</span></span><br><span class="line">core.<span class="attribute">autocrlf</span>=<span class="literal">true</span></span><br><span class="line">core.<span class="attribute">fscache</span>=<span class="literal">true</span></span><br><span class="line">color.<span class="attribute">diff</span>=auto</span><br><span class="line">color.<span class="attribute">status</span>=auto</span><br><span class="line">color.<span class="attribute">branch</span>=auto</span><br><span class="line">color.<span class="attribute">interactive</span>=<span class="literal">true</span></span><br><span class="line">help.<span class="attribute">format</span>=html</span><br><span class="line">rebase.<span class="attribute">autosquash</span>=<span class="literal">true</span></span><br><span class="line">http.<span class="attribute">sslcainfo</span>=D:/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">http.<span class="attribute">sslbackend</span>=openssl</span><br><span class="line">diff.astextplain.<span class="attribute">textconv</span>=astextplain</span><br><span class="line">filter.lfs.<span class="attribute">clean</span>=git-lfs clean -- %f</span><br><span class="line">filter.lfs.<span class="attribute">smudge</span>=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.<span class="attribute">required</span>=<span class="literal">true</span></span><br><span class="line">filter.lfs.<span class="attribute">process</span>=git-lfs filter-process</span><br><span class="line">credential.<span class="attribute">helper</span>=manager</span><br><span class="line">user.<span class="attribute">name</span>=shengwangzhong</span><br><span class="line">user.<span class="attribute">email</span>=shengwangzhong@hengtiansoft.com</span><br><span class="line">credential.<span class="attribute">helper</span>=store</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git起步&quot;&gt;&lt;a href=&quot;#Git起步&quot; class=&quot;headerlink&quot; title=&quot;Git起步&quot;&gt;&lt;/a&gt;Git起步&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;安装好第一步一定是配置用户名和邮箱.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git帮助</title>
    <link href="https://wxzhongwang.github.io/2019/01/24/Git%E5%B8%AE%E5%8A%A9/"/>
    <id>https://wxzhongwang.github.io/2019/01/24/Git帮助/</id>
    <published>2019-01-24T08:08:38.524Z</published>
    <updated>2019-01-24T08:10:09.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git帮助"><a href="#Git帮助" class="headerlink" title="Git帮助"></a>Git帮助</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">若你使用 Git 时需要获取帮助，有三种方法可以找到 Git 命令的使用手册：</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">help</span> &lt;verb&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git &lt;verb&gt; --<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><p>例如，要想获得 config 命令的手册，执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">help</span> config</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git帮助&quot;&gt;&lt;a href=&quot;#Git帮助&quot; class=&quot;headerlink&quot; title=&quot;Git帮助&quot;&gt;&lt;/a&gt;Git帮助&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git安装</title>
    <link href="https://wxzhongwang.github.io/2019/01/24/Git%E5%AE%89%E8%A3%85/"/>
    <id>https://wxzhongwang.github.io/2019/01/24/Git安装/</id>
    <published>2019-01-24T08:08:31.434Z</published>
    <updated>2019-01-24T08:10:36.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-安装Git"><a href="#Linux-安装Git" class="headerlink" title="Linux 安装Git:"></a>Linux 安装Git:</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">检查是否安装Git</span><br><span class="line">git --version </span><br><span class="line"></span><br><span class="line">在 Ubuntu 这类 Debian 体系的系统上，可以用 apt-<span class="builtin-name">get</span> 安装：</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install git</span><br><span class="line"></span><br><span class="line">CentOs:</span><br><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p>window安装比较简单不多说。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-安装Git&quot;&gt;&lt;a href=&quot;#Linux-安装Git&quot; class=&quot;headerlink&quot; title=&quot;Linux 安装Git:&quot;&gt;&lt;/a&gt;Linux 安装Git:&lt;/h1&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;
      
    
    </summary>
    
      <category term="Git" scheme="https://wxzhongwang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://wxzhongwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>互联网金融行业数仓分层</title>
    <link href="https://wxzhongwang.github.io/2019/01/13/%E4%BA%92%E8%81%94%E7%BD%91%E9%87%91%E8%9E%8D%E8%A1%8C%E4%B8%9A%E6%95%B0%E4%BB%93%E5%88%86%E5%B1%82/"/>
    <id>https://wxzhongwang.github.io/2019/01/13/互联网金融行业数仓分层/</id>
    <published>2019-01-13T03:34:12.678Z</published>
    <updated>2019-01-13T03:34:54.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网金融行业数仓分层"><a href="#互联网金融行业数仓分层" class="headerlink" title="互联网金融行业数仓分层"></a>互联网金融行业数仓分层</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li><p>ODL层 （Operational Data Layer）：操作数据层</p><blockquote><p>外部数据什么样，该层数据就是什么样（关系型数据库、JSON格式等)<br>部分关系型数据可以直接转IDL层</p></blockquote></li><li><p>BDL层 （Base Data Layer）：基础数据层</p><blockquote><p>ODL层经过简单格式化解析后存储到BDL层，常见于JSON日志格式的解析。</p></blockquote></li><li><p>IDL层 （Interface Data Layer）：接口层，也称主题表，宽表</p><blockquote><p>由BDL层经过去重、去噪、字典翻译、空值转化，日期格式化、关联JOIN、维度分析等清洗后的数据。如：用户、产品、绑卡、订单、用户行为等明细数据。</p></blockquote></li><li><p>ADL层（Application Data Layer）：应用层 ，也称数据集市</p><blockquote><p>通常与需求对接，由IDL层基于某些维度的深度加工统计汇总等操作转化而来，涉及到多个主题以及tmp数据之间的关联JOIN后的结果。</p></blockquote></li><li><p>DIC层（Dictionary Data Layer）：字典层</p><blockquote><p>存储一些诸如省、市、县区域表、渠道列表、商品类目等等表数据，可以从数据源直接sqoop生成dic_xxx表，也可以通过odl层转化层dic_表。</p></blockquote></li><li><p>TMP层（Temporary Data Layer）：临时层</p><blockquote><p>存储一些中间计算结果</p></blockquote></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3763924-bfd47ed0607208d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="image"></p><p>简要说明:</p><blockquote><ol><li>层次间的转换没必要循规蹈矩，按部就班，适当做到灵活，避免重复清洗浪费资源</li><li>ODL层干净的关系型数据可以直接转换为IDL层数据，减少计算量</li><li>ODL层侧重与外部对接，BDL层/TMP层/IDL层侧重清洗，IDL层和ADL层侧重对外提供应用服务</li><li>层数太少不够灵活，太多则在数据推翻重洗耗时，时间成本（一个坑）<br>数据源提供的数据越详细越好，避免后期大量重复的清洗工作。</li></ol></blockquote><h2 id="“星型模型”和“雪花模型”"><a href="#“星型模型”和“雪花模型”" class="headerlink" title="“星型模型”和“雪花模型”"></a>“星型模型”和“雪花模型”</h2><p>简单解释：  </p><ul><li>（1）星型模型：事实表+维度表（区域、类目、性别…)等多表通过预先JOIN冗余到一张宽表里去，常见IDL层。</li><li>（2）雪花模型：在计算的时候，才将事实表跟维度表做join。</li></ul><blockquote><p>现在一般都是采用（1）的模式，为什么呢？   预先计算，挺高性能，避免后续重复计算。CPU和内存的资源永远比磁盘空间宝贵的多。<br>至于（2)的方式，有点就是灵活，不需要太多的重复清洗，但是性能不如（1）.</p></blockquote><h2 id="建设思路"><a href="#建设思路" class="headerlink" title="建设思路"></a>建设思路</h2><blockquote><p>从需求出发，逆推应用层ADL结构，进而推导出它涉及的主题表IDL表结构，再推导可能涉及的基础表BDL表结构，最后分析所需的数据源取自何处。<br>需求包含“明确”需求和“潜在”需求。</p></blockquote><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li>创建ODL、BDL、IDL、ADL层表结构(HQL)</li><li>确定数据抽取方案（增量或全量）</li><li>编写sqoop脚本将data同步到ODL层</li><li>编写ODL-&gt;BDL-&gt;IDL-&gt;ADL层ETL清洗脚本(HQL),注意：清洗的顺序，时间<br>确保上一层的数据稳定，减少对下一层的影响</li><li>编写Hue workflow Ooize脚本</li><li>打通Kylin、FineBI、Hive关系，实现数据可视化、可导出目标,将稳定后所有脚本WIKI上保存一份</li></ol><p>其他相关的请参照原博客</p><p>作者：水星有鱼<br>链接：<a href="https://www.jianshu.com/p/f941967aeee8" target="_blank" rel="noopener">https://www.jianshu.com/p/f941967aeee8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;互联网金融行业数仓分层&quot;&gt;&lt;a href=&quot;#互联网金融行业数仓分层&quot; class=&quot;headerlink&quot; title=&quot;互联网金融行业数仓分层&quot;&gt;&lt;/a&gt;互联网金融行业数仓分层&lt;/h1&gt;&lt;h2 id=&quot;专业术语&quot;&gt;&lt;a href=&quot;#专业术语&quot; class=&quot;
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://wxzhongwang.github.io/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
      <category term="数据仓库" scheme="https://wxzhongwang.github.io/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SparkStreaming和Storm</title>
    <link href="https://wxzhongwang.github.io/2019/01/13/SparkStreaming%E5%92%8CStorm%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://wxzhongwang.github.io/2019/01/13/SparkStreaming和Storm的区别/</id>
    <published>2019-01-13T03:33:19.819Z</published>
    <updated>2019-01-13T03:35:11.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SparkStreaming和Storm"><a href="#SparkStreaming和Storm" class="headerlink" title="SparkStreaming和Storm"></a>SparkStreaming和Storm</h1><p>Storm和Spark Streaming都是分布式流处理的开源框架，但是它们之间还是有一些区别的，这里将进行比较并指出它们的重要的区别。</p><h2 id="处理模型以及延迟"><a href="#处理模型以及延迟" class="headerlink" title="处理模型以及延迟"></a>处理模型以及延迟</h2><p>虽然这两个框架都提供可扩展性(Scalability)和可容错性(Fault Tolerance),但是它们的处理模型从根本上说是不一样的。Storm处理的是每次传入的一个事件，而Spark Streaming是处理某个时间段窗口内的事件流。因此，Storm处理一个事件可以达到亚秒级的延迟，而Spark Streaming则有秒级的延迟。</p><h2 id="容错和数据保证"><a href="#容错和数据保证" class="headerlink" title="容错和数据保证"></a>容错和数据保证</h2><p>在容错数据保证方面的权衡方面，Spark Streaming提供了更好的支持容错状态计算。在Storm中，当每条单独的记录通过系统时必须被跟踪，所以Storm能够至少保证每条记录将被处理一次，但是在从错误中恢复过来时候允许出现重复记录，这意味着可变状态可能不正确地被更新两次。而Spark Streaming只需要在批处理级别对记录进行跟踪处理，因此可以有效地保证每条记录将完全被处理一次，即便一个节点发生故障。虽然Storm的 Trident library库也提供了完全一次处理的功能。但是它依赖于事务更新状态，而这个过程是很慢的，并且通常必须由用户实现。</p><p>简而言之,如果你需要亚秒级的延迟，Storm是一个不错的选择，而且没有数据丢失。如果你需要有状态的计算，而且要完全保证每个事件只被处理一次，Spark Streaming则更好。Spark Streaming编程逻辑也可能更容易，因为它类似于批处理程序，特别是在你使用批次(尽管是很小的)时。</p><h2 id="实现和编程API"><a href="#实现和编程API" class="headerlink" title="实现和编程API"></a>实现和编程API</h2><p>Storm主要是由Clojure语言实现，SparkStreaming是由Scala实现。如果你想看看这两个框架是如何实现的或者你想自定义一些东西你就得记住这一点。Storm是由BackType和Twitter开发，而Spark Streaming是在UC Berkeley开发的。</p><p>Storm提供了Java API，同时也支持其他语言的API。SparkStreaming支持Scala和Java语言(其实也支持Python)。另外SparkStreaming的一个很棒的特性就是它是在Spark框架上运行的。这样你就可以想使用其他批处理代码一样来写SparkStreaming程序，或者是在Spark中交互查询。这就减少了单独编写流批量处理程序和历史数据处理程序。</p><h2 id="生产支持"><a href="#生产支持" class="headerlink" title="生产支持"></a>生产支持</h2><p>Storm已经出现好多年了，而且自从2011年开始就在Twitter内部生产环境中使用，还有其他一些公司。而Spark Streaming是一个新的项目，并且在2013年仅仅被Sharethrough使用(据作者了解)。</p><p>Storm是 Hortonworks Hadoop数据平台中流处理的解决方案，而Spark Streaming出现在 MapR的分布式平台和Cloudera的企业数据平台中。除此之外，Databricks是为Spark提供技术支持的公司，包括了Spark Streaming。</p><h2 id="集群管理集成"><a href="#集群管理集成" class="headerlink" title="集群管理集成"></a>集群管理集成</h2><p>尽管两个系统都运行在它们自己的集群上，Storm也能运行在Mesos，而SparkStreaming能运行在YARN 和 Mesos上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SparkStreaming和Storm&quot;&gt;&lt;a href=&quot;#SparkStreaming和Storm&quot; class=&quot;headerlink&quot; title=&quot;SparkStreaming和Storm&quot;&gt;&lt;/a&gt;SparkStreaming和Storm&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="大数据" scheme="https://wxzhongwang.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="https://wxzhongwang.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop Hive Hbase 简单区别及应用场景</title>
    <link href="https://wxzhongwang.github.io/2019/01/13/Hadoop%20Hive%20Hbase%20%E7%AE%80%E5%8D%95%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://wxzhongwang.github.io/2019/01/13/Hadoop Hive Hbase 简单区别及应用场景/</id>
    <published>2019-01-13T03:30:12.445Z</published>
    <updated>2019-01-13T03:35:18.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop-Hive-Hbase-简单区别及应用场景"><a href="#Hadoop-Hive-Hbase-简单区别及应用场景" class="headerlink" title="Hadoop Hive Hbase 简单区别及应用场景"></a>Hadoop Hive Hbase 简单区别及应用场景</h1><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>它是一个分布式计算+分布式文件系统，前者其实就是MapReduce，后者是HDFS。后者可以独立运行，前者可以选择性使用，也可以不使用。</p><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><p>通俗的说是一个数据仓库，仓库中的数据是被HDFS管理的数据文件，它支持类似sql语句的功能，你可以通过该语句完成分布式环境下的计算功能，Hive会把语句转换成MapReduce，然后交给Hadoop执行。这里的计算，仅限于查找和分析，而不是更新、增加和删除。它的优势是对历史数据进行处理，用时下流行的说法是离线计算，因为它的底层是MapReduce，MapReduce在实时计算上性能很差。它的做法是把数据文件加载进来作为一个Hive表（或者外部表），让你觉得你的sql操作的是传统的表。</p><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><p>通俗的说，HBase的作用类似于数据库，传统数据库管理的是集中的本地数据文件，而HBase基于Hdfs实现对分布式数据文件的管理，比如增删改查。也就是说，HBase只是利用Hadoop的Hdfs帮助其管理数据的持久化文件（HFile），它跟MapReduce没任何关系。HBase的优势在于实时计算，所有实时数据都直接存入Hbase中，客户端通过API直接访问Hbase，实现实时计算。由于它使用的是nosql，或者说是列式结构，从而提高了查找性能，使其能运用于大数据场景，这是它跟MapReduce的区别。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>Hadoop是Hive和HBase的基础，Hive依赖Hadoop</li><li>HBase仅依赖Hadoop的Hdfs模块。</li><li>Hive适用于离线数据的分析，操作的是通用格式的（如通用的日志文件）、被Hadoop管理的数据文件，它支持类sql，比编写MapReduce的java代码来的更加方便，它的定位是数据仓库，存储和分析历史数据</li><li>Hbase适用于实时计算，采用列式结构的nosql，操作的是自己生成的特殊格式的HFile、被hadoop管理的数据文件，它的定位是数据库，或者叫DBMS</li></ol><blockquote><p>最后补充一下：Hive可以直接操作Hdfs中的文件作为它的表的数据，也可以使HBase数据库作为它的表</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hadoop-Hive-Hbase-简单区别及应用场景&quot;&gt;&lt;a href=&quot;#Hadoop-Hive-Hbase-简单区别及应用场景&quot; class=&quot;headerlink&quot; title=&quot;Hadoop Hive Hbase 简单区别及应用场景&quot;&gt;&lt;/a&gt;Hadoo
      
    
    </summary>
    
      <category term="大数据" scheme="https://wxzhongwang.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="https://wxzhongwang.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop概念</title>
    <link href="https://wxzhongwang.github.io/2019/01/08/Hadoop/"/>
    <id>https://wxzhongwang.github.io/2019/01/08/Hadoop/</id>
    <published>2019-01-08T06:18:02.000Z</published>
    <updated>2019-01-09T01:59:09.755Z</updated>
    
    <content type="html"><![CDATA[<p>Hadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。</p><h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Hadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。 ==不是为了大数据而大数据==</li><li>Hadoop 是以一种可靠、高效、可伸缩的方式进行处理的。Hadoop 是可靠的，因为它假设计算元素和存储会失败，因此它维护多个工作数据副本，确保能够针对失败的节点重新分布处理。Hadoop 是高效的，因为它以并行的方式工作，通过并行处理加快处理速度。Hadoop 还是可伸缩的，能够处理 PB 级数据。<h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2>Hadoop的核心就是==HDFS==和==MapReduce===，Hadoop旗下有很多经典子项目，比如HBase、Hive等，这些都是基于HDFS和MapReduce发展出来的。要想了解Hadoop，就必须知道HDFS和MapReduce是什么。<h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3>Hadoop Distributed File System，Hadoop 分布式文件系统<br>高度容错性的系统，适合部署在廉价的机器上，HDFS能提供高吞吐量的数据访问，适合那些有着超大数据集（large data set）的应用程序。<h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3>Mapreduce是一个计算框架，一个处理分布式海量数据的软件框架及计算集群。</li></ul><h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><ul><li>搜索引擎 - 设计Hadoop的初衷，为了针对大规模的网页快速建立索引）</li><li>大数据存储 - 利用Hadoop的分布式存储能力，例如数据备份、数据仓库等。</li><li>大数据处理 - 利用Hadoop的分布式处理能力，例如数据挖掘、数据分析等。</li><li>科学研究 - Hadoop是一种分布式的开源框架，对于分布式计算有很大程度地参考价值。</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>==高可靠性==<br>Hadoop按位存储和处理数据的能力值得信赖。</p><p>==高扩展性==<br>Hadoop是在可用的计算机集簇间分配数据并完成计算任务的，这些集簇可以方便地扩展到数以千计的节点中。</p><p>==高效性==<br>Hadoop能够在节点之间动态地移动数据，并保证各个节点的动态平衡，因此处理速度非常快。</p><p>==高容错性==<br>Hadoop能够自动保存数据的多个副本，并且能够自动将失败的任务重新分配。</p><p>==低成本==<br>与一体机、商用数据仓库以及QlikView、Yonghong Z-Suite等数据集市相比，hadoop是开源的，项目的软件成本因此会大大降低。</p><blockquote><p>Hadoop设计对硬件需求比较低，只须运行在低廉的商用硬件集群上，而无需昂贵的高可用性机器上。廉价的商用机也就意味着大型集群中出现节点故障情况的概率非常高。这就要求设计HDFS时要充分考虑数据的可靠性，安全性及高可用性。</p></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>==不适合低延迟数据访问==</p><blockquote><p>如果要处理一些用户要求时间比较短的低延迟应用请求，则HDFS不适合。HDFS是为了处理大型数据集分析任务的，主要是为达到高的数据吞吐量而设计的，这就可能要求以高延迟作为代价。</p></blockquote><blockquote><p>改进策略：对于那些有低延时要求的应用程序，HBase是一个更好的选择。通过上层数据管理项目来尽可能地弥补这个不足。在性能上有了很大的提升，它的口号就是goes real time。使用缓存或多master设计可以降低client的数据请求压力，以减少延时。还有就是对HDFS系统内部的修改，这就得权衡大吞吐量与低延时了，HDFS不是万能的银弹。</p></blockquote><p>==无法高效存储大量小文件==</p><blockquote><p>因为Namenode把文件系统的元数据放置在内存中，所以文件系统所能容纳的文件数目是由Namenode的内存大小来决定。一般来说，每一个文件、文件夹和Block需要占据150字节左右的空间，所以，如果你有100万个文件，每一个占据一个Block，你就至少需要300MB内存。当前来说，数百万的文件还是可行的，当扩展到数十亿时，对于当前的硬件水平来说就没法实现了。还有一个问题就是，因为Maptask的数量是由splits来决定的，所以用MR处理大量的小文件时，就会产生过多的Maptask，线程管理开销将会增加作业时间。举个例子，处理10000M的文件，若每个split为1M，那就会有10000个Maptasks，会有很大的线程开销；若每个split为100M，则只有100个Maptasks，每个Maptask将会有更多的事情做，而线程的管理开销将减小很多。</p></blockquote><p>==不支持多用户写入及任意修改文件==  </p><blockquote><p>在HDFS的一个文件中只有一个写入者，而且写操作只能在文件末尾完成，即只能执行追加操作。目前HDFS还不支持多个用户对同一文件的写操作，以及在文件任意位置进行修改。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。&lt;/p&gt;
&lt;h1 id=&quot;Hadoop&quot;&gt;&lt;a href=&quot;#Hadoop&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="大数据" scheme="https://wxzhongwang.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="https://wxzhongwang.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>流处理、批处理、交互式查询</title>
    <link href="https://wxzhongwang.github.io/2019/01/08/%E6%B5%81%E5%A4%84%E7%90%86%E3%80%81%E6%89%B9%E5%A4%84%E7%90%86%E3%80%81%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9F%A5%E8%AF%A2/"/>
    <id>https://wxzhongwang.github.io/2019/01/08/流处理、批处理、交互式查询/</id>
    <published>2019-01-08T06:18:02.000Z</published>
    <updated>2019-01-13T03:36:07.439Z</updated>
    
    <content type="html"><![CDATA[<pre><code>我们将大数据处理按处理时间的跨度要求分为以下几类基于实时数据流的处理，通常的时间跨度在数百毫秒到数秒之间基于历史数据的交互式查询，通常时间跨度在数十秒到数分钟之间复杂的批量数据处理，通常的时间跨度在几分钟到数小时之间</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;我们将大数据处理按处理时间的跨度要求分为以下几类

基于实时数据流的处理，通常的时间跨度在数百毫秒到数秒之间

基于历史数据的交互式查询，通常时间跨度在数十秒到数分钟之间

复杂的批量数据处理，通常的时间跨度在几分钟到数小时之间
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="大数据" scheme="https://wxzhongwang.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="https://wxzhongwang.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop技术体系</title>
    <link href="https://wxzhongwang.github.io/2019/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%EF%BC%88Hadoop%E4%BD%93%E7%B3%BB%EF%BC%89/"/>
    <id>https://wxzhongwang.github.io/2019/01/08/大数据相关技术（Hadoop体系）/</id>
    <published>2019-01-08T06:18:02.000Z</published>
    <updated>2019-01-09T02:02:32.943Z</updated>
    
    <content type="html"><![CDATA[<p>Hadoop 里面包括几个组件<strong>HDFS</strong>、<strong>MapReduce</strong>、<strong>YARN</strong>和<strong>ZooKeeper</strong>等一系列技术，HDFS是存储数据的地方就像我们电脑的硬盘一样文件都存储在这个上面，MapReduce是对数据进行处理计算的，YARN是体现Hadoop平台概念的重要组件，有了它大数据生态体系的其它软件就能在hadoop上运行了，这样能更好的利用HDFS大存储的优势和节省更多的资源比如我们就不用再单独建一个spark的集群了，让它直接跑在现有的hadoop yarn上面就可以了。ZooKeeper本身是一个非常牢靠的记事本，用于记录一些概要信息。Hadoop依靠这个记事本来记录当前哪些节点正在用，哪些已掉线，哪些是备用等，以此来管理机群。</p><h1 id="Hadoop技术体系"><a href="#Hadoop技术体系" class="headerlink" title="Hadoop技术体系"></a>Hadoop技术体系</h1><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>Hadoop 里面包括几个组件<strong>HDFS</strong>、<strong>MapReduce</strong>、<strong>YARN</strong>和<strong>ZooKeeper</strong>等一系列技术，HDFS是存储数据的地方就像我们电脑的硬盘一样文件都存储在这个上面，MapReduce是对数据进行处理计算的，YARN是体现Hadoop平台概念的重要组件，有了它大数据生态体系的其它软件就能在hadoop上运行了，这样能更好的利用HDFS大存储的优势和节省更多的资源比如我们就不用再单独建一个spark的集群了，让它直接跑在现有的hadoop yarn上面就可以了。ZooKeeper本身是一个非常牢靠的记事本，用于记录一些概要信息。Hadoop依靠这个记事本来记录当前哪些节点正在用，哪些已掉线，哪些是备用等，以此来管理机群。</p><h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><p>Hadoop Distributed File System，Hadoop 分布式文件系统<br>高度容错性的系统，适合部署在廉价的机器上，HDFS能提供高吞吐量的数据访问，适合那些有着超大数据集（large data set）的应用程序。</p><h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p>Mapreduce是一个计算框架，一个处理分布式海量数据的软件框架及计算集群。</p><p>Map （映射） Reduce (简化)<br>举个例子：假设你的手机通话信息保存在一个HDFS的文件callList.txt中，你想找到你与同事A的所有通话记录并排序。因为HDFS会把callLst.txt分成几块分别存，比如说5块，那么对应的Map过程就是找到这5块所在的5个节点，让它们分别找自己存的那块中关于同事A的通话记录，对应的Reduce过程就是把5个节点过滤后的通话记录合并在一块并按时间排序。MapReduce的计算模型通常把HDFS作为数据来源，很少会用到其它数据来源比如HBase。</p><h2 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h2><p>这是Hadoop生态体系中的NOSQL数据库，他的数据是按照key和value的形式存储的并且key是唯一的，所以它能用来做数据的排重，它与MYSQL相比能存储的数据量大很多。所以他常被用于大数据处理完成之后的存储目的地。</p><blockquote><p>HDFS和HBase是依靠外存（即硬盘）的分布式文件存储实现和分布式表存储实现。HDFS是一个分布式的“云存储”文件系统，它会把一个文件分块并分别保存，取用时分别再取出、合并。重要的是，这些分块通常会在3个节点（即集群内的服务器）上各有1个备份，因此即使出现少数节点的失效（如硬盘损坏、掉电等），文件也不会失效。如果说HDFS是文件级别的存储，那HBase则是表级别的存储。HBase是表模型，但比SQL数据库的表要简单的多，没有连接、聚集等功能。HBase的表是物理存储到HDFS的，比如把一个表分成4个HDFS文件并存储。由于HDFS级会做备份，所以HBase级不再备份。MapReduce则是一个计算模型，而不是存储模型；MapReduce通常与HDFS紧密配合。</p></blockquote><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><p>Hive 是一种底层封装了Hadoop 的数据仓库处理工具，使用类SQL的HiveQL语言实现数据查询，所有Hive 的数据都存储在Hadoop 兼容的文件系统（如HDFS）中。Hive在加载数据过程中不会对数据进行任何的修改，只是将数据移动到HDFS中Hive设定的目录下，++因此，Hive不支持对数据的改写和添加，所有的数据都是在加载的时候确定的++。对于会SQL语法的来说就是神器，它能让你处理大数据变的很简单，不会再费劲的编写MapReduce程序。</p><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><p>它是用来弥补基于MapReduce处理数据速度上的缺点，它的特点是把数据装载到内存中计算而不是去读慢的要死进化还特别慢的硬盘。特别适合做迭代运算，所以算法流们特别稀饭它。它是用scala编写的。Java语言或者Scala都可以操作它，因为它们都是用JVM的。</p><h1 id="其他相关技术"><a href="#其他相关技术" class="headerlink" title="其他相关技术"></a>其他相关技术</h1><h2 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h2><p>这个是用于把Mysql里的数据导入到Hadoop里的。当然你也可以不用这个，直接把Mysql数据表导出成文件再放到HDFS上也是一样的，当然生产环境中使用要注意Mysql的压力。</p><h2 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h2><p> apache Flume 是一个从可以收集例如日志，事件等数据资源，并将这些数量庞大的数据从各项数据资源中集中起来存储的工具/服务，或者数集中机制。flume具有高可用，分布式，配置工具，其设计的原理也是基于数据流，如日志数据从各种网站服务器上汇集起来存储到HDFS，HBase等集中存储器中。</p><h3 id="一般实时系统，所选用组件如下"><a href="#一般实时系统，所选用组件如下" class="headerlink" title="一般实时系统，所选用组件如下"></a>一般实时系统，所选用组件如下</h3><ul><li>数据采集 ：负责从各节点上实时采集数据，选用Flume来实现  </li><li>数据接入 ：由于采集数据的速度和数据处理的速度不一定同步，因此添加一个消息中间件来作为缓冲，选用apache的kafka  </li><li>流式计算 ：对采集到的数据进行实时分析，选用apache的storm  </li><li>数据输出 ：对分析后的结果持久化，暂定用mysql，另一方面是模块化之后，假如当Storm挂掉了之后，数据采集和数据接入还是继续在跑着，数据不会丢失，storm起来之后可以继续进行流式计算； </li></ul><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>Kafka的整体架构非常简单，是显式分布式架构，producer、broker（kafka）和consumer都可以有多个。Producer，consumer实现Kafka注册的接口，数据从producer发送到broker，broker承担一个中间缓存和分发的作用。broker分发注册到系统中的consumer。broker的作用类似于缓存，即活跃的数据和离线处理系统之间的缓存。客户端和服务器端的通信，是基于简单，高性能，且与编程语言无关的TCP协议。</p><p>Kafka是一种分布式的、基于发布/订阅的消息系统。在流式计算中，Kafka一般用来缓存数据，Storm通过消费Kafka的数据进行计算（KAFKA+STORM+REDIS）。</p><p>特点：</p><ul><li>消息持久化：通过O(1)的磁盘数据结构提供数据的持久化</li><li>高吞吐量：每秒百万级的消息读写</li><li>分布式：扩展能力强</li><li>多客户端支持：java、php、python、c++ ……</li><li>实时性：生产者生产的message立即被消费者可见</li><li>Kafka是一个分布式消息队列：生产者、消费者的功能。它提供了类似于JMS的特性，但是在设计实   现上完全不同，此外它并不是JMS规范的实现。</li><li>Kafka对消息保存时根据Topic进行归类，发送消息者称为Producer,消息接受者称为Consumer</li><li>无论是kafka集群，还是producer和consumer都依赖于zookeeper集群保存一些meta信息，来保证系统可用性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hadoop 里面包括几个组件&lt;strong&gt;HDFS&lt;/strong&gt;、&lt;strong&gt;MapReduce&lt;/strong&gt;、&lt;strong&gt;YARN&lt;/strong&gt;和&lt;strong&gt;ZooKeeper&lt;/strong&gt;等一系列技术，HDFS是存储数据的地方就像我们电脑
      
    
    </summary>
    
      <category term="大数据" scheme="https://wxzhongwang.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="https://wxzhongwang.github.io/tags/Hadoop/"/>
    
  </entry>
  
</feed>
